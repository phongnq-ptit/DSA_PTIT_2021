Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. 
Sử dụng thuật toán DFS, hãy kiểm tra xem đồ thị có tồn tại chu trình hay không?

Input:
	Dòng đầu tiên đưa vào T là số lượng bộ test.
	Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: 
		dòng đầu tiên đưa vào hai số |V|, |E| tương ứng với số đỉnh,  số cạnh của đồ thị; 
		Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
	T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤10^3; 1≤|E|≤|V|(|V|-1)/2;
Output:
	Đưa ra YES hoặc “NO” kết quả test theo từng dòng tương ứng với đồ thị tồn tại hoặc không tồn tại chu trình.

Input:

1

6 9  

1 2 2 4 3 1 3 2 3 5 4 3 5 4 5 6 6 4

Output:

YES

#include<bits/stdc++.h>

using namespace std;

vector<int> List[1005];
bool tick[1005];

void reset(){
    for(int i = 1; i <= 1000; i++) List[i].clear();
    memset(tick, false, sizeof(tick));
}

bool DFS(int u){
    stack<int> st;
    st.push(u);
    while(!st.empty()){
        int x = st.top(); st.pop();
        for(int y: List[x]){
            if(!tick[y]){
                tick[y] = true;
                st.push(x); st.push(y);
                break;
            } else if(y == u) return true;
        }
    }
    return false;
}

void solve(){
    reset();
    int U, u, V, v; cin>>U>>V;
    while(V--){
        cin>>u>>v;
        List[u].push_back(v);
    }

    for(int i = 1; i <= U; i++){
        memset(tick, false, sizeof(tick));
        if(DFS(i)){
            cout<<"YES"<<endl;
            return;
        }
    }
    
    cout<<"NO"<<endl;
}

int main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    int a; cin>>a;
    while(a--) solve();
    return 0;
}