Cho đồ thị vô hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. 
Hãy viết thuật toán duyệt theo chiều sâu bắt đầu tại đỉnh uÎV (DFS(u)=?)

Input:
	Dòng đầu tiên đưa vào T là số lượng bộ test.
	Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm |E| +1 dòng: 
		dòng đầu tiên đưa vào ba số 
		|V|, |E| tương ứng với số đỉnh và số cạnh của đồ thị, và u là đỉnh xuất phát; 
		|E| dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
	T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤200; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:
	Đưa ra danh sách các đỉnh được duyệt theo thuật toán DFS(u) của mỗi test theo khuôn dạng của ví dụ dưới đây.


Input:

1

6 9 5

1 2

1 3

2 3

2 4

3 4

3 5

4 5

4 6

5 6

Output:

5 3 1 2 4 6

 
#include<bits/stdc++.h>

using namespace std;

vector<int> List[1005];
bool tick[1005];

void DFS(int u){
    stack<int> st; st.push(u);
    cout<<u<<" ";
    tick[u] = true;
    while(!st.empty()){
        int x = st.top(); st.pop();
        for(int i = 0; i < List[x].size(); i++){
            int y = List[x][i];
            if(!tick[y]){
                cout<<y<<" ";
                tick[y] = true;
                st.push(x); st.push(y);
                break;
            }
        }
    }
    cout<<endl;
}

void solve(){
    memset(tick, false, sizeof(tick));
    for(int i = 0; i <= 1000; i++) List[i].clear();
    
    int vertex, edge; cin>>vertex>>edge;
    int U; cin>>U;

    while(edge--){
        int u, v; cin>>u>>v;
        List[u].push_back(v);
        List[v].push_back(u);
    }

    DFS(U);
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}