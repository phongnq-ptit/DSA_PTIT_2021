Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. 
Hãy tìm đường đi từ đỉnh uÎV đến đỉnh vÎV trên đồ thị bằng thuật toán BFS.

Input:
	Dòng đầu tiên đưa vào T là số lượng bộ test.
	Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: 
		dòng đầu tiên đưa vào bốn số |V|, |E|, sÎV, tÎV tương ứng với số đỉnh, số cạnh,  đỉnh u, đỉnh v; 
		|E| Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
	T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:
	Đưa ra đường đi từ đỉnh s đến đỉnh t của mỗi test theo thuật toán BFS của mỗi test theo khuôn dạng 
	của ví dụ dưới đây. Nếu không có đáp án, in ra -1.


Input:

1

6 9 1 6

1 2 2 5 3 1 3 2 3 5 4 3 5 4 5 6 6 4

Output:

1 2 5 6



#include<bits/stdc++.h>

using namespace std;
vector<int> List[1005];
int before[1005];
bool tick[1005];

void BFS(int u){
    queue<int> que; que.push(u);
    tick[u] = true;
    while(!que.empty()){
        int x = que.front(); que.pop();
        for(int i = 0; i < List[x].size(); i++){
            int y = List[x][i];
            if(!tick[y]){
                before[y] = x;
                tick[y] = true;
                que.push(y);
            }
        }
    }
}

void solve(){
    for(int i = 0; i <= 1000; i++) List[i].clear();
    memset(tick, false, sizeof(tick));

    int vertex, edge; cin>>vertex>>edge;
    int U, V; cin>>U>>V;

    while(edge--){
        int u, v; cin>>u>>v;
        List[u].push_back(v);
    }

    BFS(U);

    if(!tick[V]) cout<<-1;
    else{
        vector<int> res;
        while(V != U){
            res.push_back(V);
            V = before[V];
        }
        res.push_back(U);
        for(int i = res.size() - 1; i >= 0; i--) cout<<res[i]<<" ";
    }
    cout<<endl;
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}