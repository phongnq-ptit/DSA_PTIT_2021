Cho đồ thị vô hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. 
Hãy tìm số thành phần liên thông của đồ thị bằng thuật toán BFS.

Input:
	Dòng đầu tiên đưa vào T là số lượng bộ test.
	Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: 
		dòng đầu tiên đưa vào hai số |V|, |E| tương ứng với số đỉnh và số cạnh; 
		Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
	T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤100; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:
	Đưa ra số thành phần liên thông của đồ thị bằng thuật toán BFS.


Input:

1

6  6 

1 2 1 3 2 3 3 4 3 5 4 5

Output:

2

 

#include<bits/stdc++.h>

using namespace std;

vector<int> List[1005];
bool tick[1005];

void BFS(int u){
    queue<int> que; que.push(u);
    tick[u] = true;
    while(!que.empty()){
        int x = que.front(); que.pop();
        for(int i = 0; i < List[x].size(); i++){
            int y =  List[x][i];
            if(!tick[y]){
                tick[y] = true;
                que.push(y);
            }
        }
    }
}

void solve(){
    for(int i = 0; i < 1001; i++) List[i].clear();
    memset(tick, false, sizeof(tick));

    int vertex, edge; cin>>vertex>>edge;

    while(edge--){
        int u, v; cin>>u>>v;
        List[u].push_back(v);
        List[v].push_back(u);
    }

    int res = 0;
    for(int i = 1; i <= vertex; i++){
        if(!tick[i]){
            res++;
            BFS(i);
        }
    }

    cout<<res<<endl;
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}