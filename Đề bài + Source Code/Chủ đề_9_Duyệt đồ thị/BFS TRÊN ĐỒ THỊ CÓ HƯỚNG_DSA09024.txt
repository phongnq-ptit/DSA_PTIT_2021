Cho đồ thị có hướng G=<V, E> được biểu diễn dưới dạng danh sách cạnh. 
Hãy viết thuật toán duyệt theo chiều rộng bắt đầu tại đỉnh uÎV (BFS(u)=?)

Input:
	Dòng đầu tiên đưa vào T là số lượng bộ test.
	Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng: 
		dòng đầu tiên đưa vào ba số |V|, |E|, uÎV tương ứng với số đỉnh, số cạnh và đỉnh bắt đầu duyệt; 
		Dòng tiếp theo đưa vào các bộ đôi uÎV, vÎV tương ứng với một cạnh của đồ thị.
	T, |V|, |E| thỏa mãn ràng buộc: 1≤T≤200; 1≤|V|≤103; 1≤|E|≤|V|(|V|-1)/2;
Output:
	Đưa ra danh sách các đỉnh được duyệt theo thuật toán BFS(u) của mỗi test theo khuôn dạng của ví dụ dưới đây.


Input:

1

6  9  1

1 2 2 5 3 1 3 2 3 5 4 3 5 4 5 6 6 4

Output:

1 2 5 4 6 3

 

#include<bits/stdc++.h>

using namespace std;

vector<int> List[1005];
bool tick[1005];

void BFS(int u){
    queue<int> que; que.push(u);
    cout<<u<<" ";
    tick[u] = true;
    while(!que.empty()){
        int x = que.front(); que.pop();
        for(int i = 0; i < List[x].size(); i++){
            int y = List[x][i];
            if(!tick[y]){
                cout<<y<<" ";
                que.push(y);
                tick[y] = true;
            }
        }
    }
    cout<<endl;
}

void solve(){
    memset(tick, false, sizeof(tick));
    for(int i = 0; i <= 1000; i++) List[i].clear();
    
    int vertex, edge; cin>>vertex>>edge;
    int U; cin>>U;

    while(edge--){
        int u, v; cin>>u>>v;
        List[u].push_back(v);
    }

    BFS(U);
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}