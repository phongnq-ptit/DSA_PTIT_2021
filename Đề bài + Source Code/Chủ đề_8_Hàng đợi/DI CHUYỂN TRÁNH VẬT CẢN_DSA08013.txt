Cho một bảng kích thước N x N, trong đó có các ô trống ‘.’ và vật cản ‘X’. 
Các hàng và các cột được đánh số từ 0.
Mỗi bước di chuyển, bạn có thể đi từ ô (x, y) tới ô (u, v) nếu như 2 ô này nằm trên cùng một hàng hoặc một cột, 
và không có vật cản nào ở giữa.
Cho điểm xuất phát và điểm đích. Bạn hãy tính số bước di chuyển ít nhất?

Input:
	Dòng đầu ghi số bộ test (không quá 10). Mỗi test gồm:
	Dòng đầu tiên là số nguyên dương N (1 ≤ N ≤ 100).
	N dòng tiếp theo, mỗi dòng gồm N kí tự mô tả bảng.
	Cuối cùng là 4 số nguyên a, b, c, d với (a, b) là tọa độ điểm xuất phát, (c, d) là tọa độ đích. 
	Dữ liệu đảm bảo hai vị trí này không phải là ô có vật cản.
Output: 
	Với mỗi test, in ra một số nguyên là đáp số của bài toán.
 

Input

1

3

.X.

.X.

...

0 0 0 2

Output 

3



#include<bits/stdc++.h>

using namespace std;
#define pii pair<int, int> 

int n;
int row_st, row_en, col_st, col_en;
char matrix[105][105];
bool tick[105][105];

int solve(){
    memset(tick, false, sizeof(tick));
    cin>>n;
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            cin>>matrix[i][j];

    cin>>row_st>>col_st>>row_en>>col_en;
    
    queue<pair<pii, int>> que; que.push({{row_st, col_st}, 0});
    tick[row_st][col_st] = true;

    while(!que.empty()){
        auto tmp = que.front(); que.pop();
        auto value = tmp.first;
        int row = value.first, col = value.second;
        int step = tmp.second;
        
        for(int i = row + 1; i < n; i++){
            if(matrix[i][col] == 'X') break;
            if(i == row_en && col == col_en) return step + 1;
            if(!tick[i][col]){
                que.push({{i, col}, step + 1});
                tick[i][col] = true;
            }
        }

        for(int i = row - 1; i >= 0; i--){
            if(matrix[i][col] == 'X') break;
            if(i == row_en && col == col_en) return step + 1;
            if(!tick[i][col]){
                que.push({{i, col}, step + 1});
                tick[i][col] = true;
            }
        }

        for(int i = col + 1; i < n; i++){
            if(matrix[row][i] == 'X') break;
            if(i == col_en && row == row_en) return step + 1;
            if(!tick[row][i]){
                que.push({{row, i}, step + 1});
                tick[row][i] = true;
            }
        }

        for(int i = col - 1; i >= 0; i--){
            if(matrix[row][i] == 'X') break;
            if(i == col_en && row == row_en) return step + 1;
            if(!tick[row][i]){
                que.push({{row, i}, step + 1});
                tick[row][i] = true;
            }
        }
    }
    return -1;
}

int main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    int a; cin>>a;
    while(a--){
        cout<<solve()<<endl;
    }
    return 0;
}