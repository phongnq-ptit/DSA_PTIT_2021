Ta gọi số nguyên dương K là một số BDN nếu các chữ số trong K chỉ bao gồm các 0 hoặc 1 có nghĩa. 
Ví dụ số K =  101 là số BDN, k=102 không phải là số BDN.
Số BDN của N là số P =M*N sao cho P là số BDN. 
Cho số tự nhiên N (N<1000), hãy tìm số BDN nhỏ nhất của N.

Ví dụ. Với N=2, ta tìm được số BDN của N là P = 5*2=10. N = 17 ta tìm được số BDN của 17 là P = 653*17=11101.

Input:
	Dòng đầu tiên ghi lại số tự nhiên T là số lượng Test;
	T dòng kế tiếp mỗi dòng ghi lại một bộ Test. Mỗi test là một số tự nhiên N.
Output:
	Đưa ra kết quả mỗi test theo từng dòng.


Input

3

2

12

17

Output

10

11100

11101



#include<bits/stdc++.h>

using namespace std;
typedef long long ll;

void solve(){
    ll n; cin>>n;
    queue<ll> que; que.push(1);

    while(true){
        for(int i = 0; i <= 1; i++) {
            ll tmp = que.front()*10 + i;
            que.push(tmp);
        }
        if(que.front()%n == 0){
            cout<<que.front()<<endl;
            break;
        } else que.pop();
    }
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}

 