Cho ma trận A[M][N]. 
Nhiệm vụ của bạn hãy tìm số bước đi ít nhất dịch chuyển từ vị trí A[1][1] đến vị trí A[M][N]. 
Biết mỗi bước đi ta chỉ được phép dịch chuyển đến vị trí A[i][j+A[i][j]] hoặc vị trí A[i+A[i][j]][j] bên trong ma trận.

Input:
	Dòng đầu tiên đưa vào số lượng test T.
	Dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm hai phần: 
		phần thứ nhất là hai số M, N; 
		phần thứ hai là các phần tử của ma trận A[][]; 
		các số được viết cách nhau một vài khoảng trống.
	T, M, N, A[i][j] thỏa mãn ràng buộc: 1≤T≤100; 1≤M, N, A[i][j]≤10^3.
Output:
	Đưa ra kết quả mỗi test theo từng dòng. In ra -1 nếu không tìm được đáp án.

Input

1

3  3

2  1  2

1  1  1

1  1  1

Output

2

 
#include<bits/stdc++.h>

using namespace std;
#define pii pair<int, int>
#define piii pair<pii, int>

void solve(){
    int n, m; cin>>n>>m;
    int matrix[n + 5][m + 5];
    map<pii, bool> tick;

    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            cin>>matrix[i][j];

    queue<piii> que; que.push({{1, 1}, 0});
    tick[{1, 1}] = true;

    while(!que.empty()){
        piii tmp = que.front(); que.pop();
        int row = tmp.first.first;
        int col = tmp.first.second;
        int step = tmp.second;
        int val = matrix[row][col];

        if(row == n && col == m){
            cout<<step<<endl;
            return;
        }

        if(row + val <= n && !tick[{row + val, col}]){
            tick[{row + val, col}] = true;
            que.push({{row + val, col}, step + 1});
        }

        if(col + val <= m && !tick[{row, col + val}]){
            tick[{row, col + val}] = true;
            que.push({{row, col + val}, step + 1});
        }
    }

    cout<<-1<<endl;
}

int main(){
    ios_base::sync_with_stdio(0); cin.tie(0);
    int a; cin>>a;
    while(a--) solve();
    return 0;
}