Cho ma trận A[M][N].
Nhiệm vụ của bạn là đếm tất cả các đường đi từ phần tử A[0][0] đến phần tử A[M-1][N-1]. 
Bạn chỉ được phép dịch chuyển xuống dưới hoặc sang phải phần tử liền kề với vị trí hiện tại.

Input:
	Dòng đầu tiên đưa vào số lượng bộ test T.
	Những dòng kế tiếp đưa vào các bộ test. Mỗi bộ test gồm hai phần: 
		phần thứ nhất là hai số M, N tương ứng với số hàng và số cột của ma trận; 
		dòng tiếp theo đưa vào các phần tử của ma trận A[][]; 
		các số được viết cách nhau một vài khoảng trống.
	T, M, N, A[i][j] thỏa mãn ràng buộc: 1≤T ≤10; 1≤M, N, A[i][j]≤100.
Output:
	Đưa ra số cách di chuyển của mỗi test theo từng dòng.
	Giải thích test 1: Có 3 cách di chuyển là [1 4 5 6], [1 2 5 6] và [1 2 3 6].
 

Input

2
2  3
1  2  3 
4  5  6
2  2
1  2 
3  4

Output

3

2

 
#include<bits/stdc++.h>

using namespace std;

int n,m, res;
int arr[15][15];
vector<vector<bool>> tick(15, vector<bool>(15, false));

void back_track(int i, int j){
    if(i == n && j == m) res++;

    if(!tick[i + 1][j] && i < n){
        tick[i][j] = true;
        back_track(i + 1, j);
        tick[i][j] = false;
    }
    if(!tick[i][j + 1] && j < m){
        tick[i][j] = true;
        back_track(i, j + 1);
        tick[i][j] = false;
    }
}

void solve(){
    res = 0; 
    cin>>n>>m;
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= m; j++) cin>>arr[i][j];
    }

    back_track(1, 1);

    cout<<res<<endl;
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
    }
    return 0;
}