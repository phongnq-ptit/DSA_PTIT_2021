Cho mảng A[] gồm n phần tử, mảng B[] gồm m phần tử khác nhau. 
Các phần tử của mảng A[] và B[] đã được sắp xếp. 
Hãy tìm mảng hợp và giao được sắp giữa A[] và B[]. 
Ví dụ với A[] = {1, 3, 4, 5, 7}, B[]={2, 3, 5, 6} ta có mảng hợp Union = {1, 2, 3, 4, 5, 6, 7}, mảng giao Intersection = {3, 5}. 
In ra đáp án theo giá trị phần tử từ nhỏ đến lớn.

Input:
	Dòng đầu tiên đưa vào số lượng bộ test T.
	Những dòng kế tiếp đưa vào T bộ test. Mỗi bộ test gồm ba dòng: dòng đầu tiên đưa vào n, m là số phần tử của mảng A[] và B[]; dòng tiếp theo là n số A [i] của mảng A [];dòng tiếp theo là m số B[i] của mảng B[]; các số được viết cách nhau một vài khoảng trống.
	T, n, m, A[i], B[i] thỏa mãn ràng buộc: 1≤ T ≤100; 1≤ n, m, A[i], B[i] ≤10^5.
Output:
	Đưa ra kết quả mỗi test theo từng dòng.


Input:

1
5 3
1 2 3 4 5
1 2 3

Output:

1 2 3 4 5

1 2 3




#include<bits/stdc++.h>

using namespace std;

set<int> union_array; // mang hop
map<int, int> intersection; // mang giao

void input(int arr[], int n){
    for(int i = 0; i < n; i++) {
        cin>>arr[i];
        union_array.insert(arr[i]);
        intersection[arr[i]]++;
    }
}

void solve(){
    int n, m; cin>>n>>m;
    int a[n], b[m];
    input(a, n); input(b, m);

    for(set<int>::iterator i = union_array.begin(); i != union_array.end(); i++)
        cout<<*i<<" ";
    cout<<endl;
    for(auto i: intersection) {
        if(i.second > 1)
            cout<<i.first<<" ";
    }
    cout<<endl;
}

int main(){
    int a; cin>>a;
    while(a--){
        solve();
        union_array.clear();
        intersection.clear();
    }
    return 0;
}

 

 